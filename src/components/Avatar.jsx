/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/68994a8568086dd7c6759d42.glb -o src/components/Avatar.jsx -r public 
*/

import React, { useRef, useEffect, useMemo, useState } from "react";
import { useGLTF, useFBX, useAnimations } from "@react-three/drei";
import { useGraph } from "@react-three/fiber";
import { SkeletonUtils } from "three-stdlib";

export function Avatar(props) {
  const { scene } = useGLTF('/68994a8568086dd7c6759d42.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)

  const { animations: idleAnimation } = useFBX("Animations/Idle (1).fbx");
  const { animations: greetAnimation } = useFBX("Animations/Standing Greeting.fbx")
  const { animations: talkAnimation } = useFBX("Animations/Talking (1).fbx")

  idleAnimation[0].name = "Idle";
  greetAnimation[0].name = "Greet";
  talkAnimation[0].name = "Talk";

  const [animation, setAnimation] = useState("Idle");

  const group = useRef();
  const {actions} = useAnimations([idleAnimation[0], greetAnimation[0], talkAnimation[0]],group);

  useEffect(() => {
  const action = actions[animation];
  if (action) {
    action.reset().fadeIn(0.5).play();
    return () => {
      if (actions[animation]) {
        actions[animation].fadeOut(0.5);
      }
    };
  }
}, [animation, actions]);
  
  

  return (
    <group {...props} dispose={null} ref={group} onPointerOver={() => setAnimation("Greet")}
      onPointerOut={() => setAnimation("Idle")}>
      <primitive object={nodes.Hips} />
      <skinnedMesh name="Wolf3D_Avatar" geometry={nodes.Wolf3D_Avatar.geometry} material={materials.Wolf3D_Avatar} skeleton={nodes.Wolf3D_Avatar.skeleton} morphTargetDictionary={nodes.Wolf3D_Avatar.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Avatar.morphTargetInfluences} />
    </group>
  )
}

useGLTF.preload('/68994a8568086dd7c6759d42.glb')
