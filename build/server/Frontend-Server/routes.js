import nodemailer from "nodemailer";
import { queryResume, chatWithGemini } from "./llm.js"; // your Gemini + RAG logic
import fs from "fs";
import path from "path";
// Register routes
export function registerRoutes(app) {
    // üì© Contact form route
    app.post("/api/contact/send", async (req, res) => {
        const { name, email, subject, message } = req.body;
        console.log("üì• Incoming contact form:", req.body);
        if (!name || !email || !message) {
            console.warn("‚ö†Ô∏è Missing required fields");
            return res.status(400).json({ error: "Please fill in all required fields." });
        }
        try {
            const transporter = nodemailer.createTransport({
                service: "gmail",
                auth: {
                    user: "neerajvpattanashetti@gmail.com",
                    pass: "ssfz lamn hnoi ezon", // Gmail App Password
                },
            });
            await transporter.sendMail({
                from: `"${name}" <${email}>`,
                to: "neerajvpattanashetti@gmail.com",
                subject: subject || "New Contact Form Message",
                text: `From: ${name} <${email}>\n\n${message}`,
            });
            console.log("‚úÖ Contact form email sent successfully");
            res.json({ success: true, message: "Message sent successfully" });
        }
        catch (error) {
            console.error("‚ùå Error sending email:", error);
            res.status(500).json({ error: "Failed to send message" });
        }
    });
    // ü§ñ Chat route (Gemini + TTS)
    app.post("/api/chat", async (req, res) => {
        try {
            console.log("2");
            const { query } = req.body;
            console.log("üó£Ô∏è User query:", query);
            if (!query) {
                return res.status(400).json({ error: "Query is required" });
            }
            // 1Ô∏è‚É£ Query vector DB for context
            const contextDocs = await queryResume(query);
            console.log("üìö Retrieved context docs:", contextDocs?.length || 0);
            // 2Ô∏è‚É£ Call Gemini
            const { text, audio } = await chatWithGemini(query, contextDocs);
            console.log("ü§ñ Gemini response:", text);
            // 3Ô∏è‚É£ Check if audio was generated
            if (audio && audio.length > 0) {
                console.log(`üé∂ Audio generated successfully (size: ${audio.length} bytes)`);
                // Save audio file locally for debugging
                const audioDir = path.join(process.cwd(), "audio");
                if (!fs.existsSync(audioDir)) {
                    fs.mkdirSync(audioDir, { recursive: true });
                }
                const audioPath = path.join(audioDir, "response.wav");
                fs.writeFileSync(audioPath, audio);
                console.log(`üíæ Audio saved at: ${audioPath}`);
            }
            else {
                console.warn("‚ö†Ô∏è No audio generated by Kokoro");
            }
            // 4Ô∏è‚É£ Send back text + audio (base64)
            res.json({
                text,
                audioBase64: audio?.toString("base64"),
            });
        }
        catch (err) {
            console.error("‚ùå Chat error:", err);
            res.status(500).json({ error: "Internal Server Error" });
        }
    });
}
